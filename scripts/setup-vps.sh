#!/bin/bash

# VPS Security Setup Script
# Run this script as root on a fresh VPS

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    error "This script must be run as root. Please run: sudo $0"
fi

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}    VPS Security Setup Script${NC}"
echo -e "${BLUE}========================================${NC}"
echo

# Get user input
read -p "Enter username for new sudo user: " USERNAME
while [[ -z "$USERNAME" ]]; do
    read -p "Username cannot be empty. Enter username: " USERNAME
done

read -p "Enter custom SSH port (1024-65535): " SSH_PORT
while [[ ! "$SSH_PORT" =~ ^[0-9]+$ ]] || [[ "$SSH_PORT" -lt 1024 ]] || [[ "$SSH_PORT" -gt 65535 ]]; do
    read -p "Invalid port. Enter port between 1024-65535: " SSH_PORT
done

echo
log "Configuration:"
log "  Username: $USERNAME"
log "  SSH Port: $SSH_PORT"
echo

read -p "Continue with setup? (y/N): " CONFIRM
if [[ ! "$CONFIRM" =~ ^[Yy]$ ]]; then
    log "Setup cancelled."
    exit 0
fi

echo
log "Starting VPS security setup..."

# Update system
log "Updating system packages..."
apt update && apt upgrade -y

# Install essential packages
log "Installing essential packages..."
apt install -y curl wget git vim htop ufw fail2ban unattended-upgrades

# Create new user
log "Creating user: $USERNAME"
if id "$USERNAME" &>/dev/null; then
    warn "User $USERNAME already exists"
else
    adduser --gecos "" "$USERNAME"
    usermod -aG sudo "$USERNAME"
    log "User $USERNAME created and added to sudo group"
fi

# Setup SSH directory for new user
log "Setting up SSH directory for $USERNAME"
USER_HOME=$(eval echo ~$USERNAME)
mkdir -p "$USER_HOME/.ssh"
chmod 700 "$USER_HOME/.ssh"
touch "$USER_HOME/.ssh/authorized_keys"
chmod 600 "$USER_HOME/.ssh/authorized_keys"
chown -R "$USERNAME:$USERNAME" "$USER_HOME/.ssh"

# Backup original SSH config
log "Backing up SSH configuration..."
cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup.$(date +%Y%m%d_%H%M%S)

# Configure SSH
log "Configuring SSH security settings..."
cat > /etc/ssh/sshd_config << EOF
# SSH Configuration - Generated by VPS Setup Script
Port $SSH_PORT
Protocol 2

# Authentication
PermitRootLogin no
PasswordAuthentication no
ChallengeResponseAuthentication no
UsePAM no
PubkeyAuthentication yes

# Additional security
MaxAuthTries 3
ClientAliveInterval 300
ClientAliveCountMax 2
AllowUsers $USERNAME

# Logging
SyslogFacility AUTH
LogLevel INFO

# Other settings
X11Forwarding no
PrintMotd no
AcceptEnv LANG LC_*
Subsystem sftp /usr/lib/openssh/sftp-server
EOF

# Test SSH configuration
log "Testing SSH configuration..."
if ! sshd -t; then
    error "SSH configuration test failed"
fi

# Configure UFW firewall
log "Configuring UFW firewall..."
ufw --force reset
ufw default deny incoming
ufw default allow outgoing
ufw allow $SSH_PORT/tcp
ufw allow 80/tcp
ufw allow 443/tcp
ufw --force enable

# Configure fail2ban
log "Configuring fail2ban..."
cat > /etc/fail2ban/jail.local << EOF
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 3

[sshd]
enabled = true
port = $SSH_PORT
filter = sshd
logpath = /var/log/auth.log
EOF

systemctl enable fail2ban
systemctl start fail2ban

# Enable automatic security updates
log "Enabling automatic security updates..."
echo 'Unattended-Upgrade::Automatic-Reboot "false";' >> /etc/apt/apt.conf.d/50unattended-upgrades
dpkg-reconfigure -f noninteractive unattended-upgrades

# Create swap file
log "Creating swap file..."
if [[ ! -f /swapfile ]]; then
    fallocate -l 1G /swapfile
    chmod 600 /swapfile
    mkswap /swapfile
    swapon /swapfile
    echo '/swapfile none swap sw 0 0' >> /etc/fstab
    log "1GB swap file created"
else
    warn "Swap file already exists"
fi

# Create helper script for user
log "Creating helper scripts..."
cat > "$USER_HOME/check-security.sh" << EOF
#!/bin/bash
echo "=== VPS Security Status ==="
echo
echo "UFW Status:"
sudo ufw status verbose
echo
echo "Fail2ban Status:"
sudo fail2ban-client status
echo
echo "SSH Configuration:"
sudo sshd -T | grep -E "(port|permitrootlogin|passwordauthentication|pubkeyauthentication)"
echo
echo "Active SSH Sessions:"
who
echo
echo "Recent Failed Login Attempts:"
sudo grep "Failed password" /var/log/auth.log | tail -5
EOF

chmod +x "$USER_HOME/check-security.sh"
chown "$USERNAME:$USERNAME" "$USER_HOME/check-security.sh"

# Restart SSH service
log "Restarting SSH service..."
if ! systemctl restart ssh; then
    warn "SSH restart failed, trying alternative method..."
    systemctl daemon-reload
    systemctl restart ssh.socket
    log "SSH service restarted using socket method"
fi

echo
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}    Setup Complete!${NC}"
echo -e "${GREEN}========================================${NC}"
echo
log "IMPORTANT: Before logging out, complete these steps:"
echo
warn "1. Add your SSH public key to: $USER_HOME/.ssh/authorized_keys"
warn "2. Test SSH connection in a NEW terminal: ssh -p $SSH_PORT $USERNAME@$(hostname -I | awk '{print $1}')"
warn "3. Update your local ~/.ssh/config file"
echo
log "SSH Configuration:"
log "  Port: $SSH_PORT"
log "  User: $USERNAME"
log "  Key-only authentication: Enabled"
log "  Root login: Disabled"
echo
log "Security Features Enabled:"
log "  ✓ UFW Firewall"
log "  ✓ Fail2ban"
log "  ✓ Automatic security updates"
log "  ✓ Swap file (1GB)"
echo
log "Helper script created: $USER_HOME/check-security.sh"
echo
warn "DO NOT close this session until you verify SSH access with the new user!"
echo